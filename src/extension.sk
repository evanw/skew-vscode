@import {
  def require(name string) dynamic
  var exports dynamic
}

var path = require("path")
var vscode = require("vscode")
var client = require("vscode-languageclient")

@entry
def main {
  exports.activate = context => {
    var serverModule = context.asAbsolutePath(path.join("out", "server.js"))

    var serverOptions dynamic = {
      "run": { "module": serverModule, "transport": client.TransportKind.ipc },
      "debug": { "module": serverModule, "transport": client.TransportKind.ipc },
    }

    var clientOptions dynamic = {
      "documentSelector": ["skew"],
      "synchronize": {
        "fileEvents": vscode.workspace.createFileSystemWatcher("**/*.sk"),
      },
    }

    var server = client.LanguageClient.new("Skew", serverOptions, clientOptions)
    context.subscriptions.push(server.start())

    vscode.languages.registerCodeActionsProvider("skew", {
      "provideCodeActions": (document, range, context) => {
        var diagnostic = context.diagnostics[0]
        var message string = diagnostic.message
        var commands List<dynamic> = []
        var arguments = [document, diagnostic.range]

        if message == "Unnecessary parentheses" {
          commands.append({
            "title": "Remove unnecessary parentheses",
            "command": "skew.removeParentheses",
            "arguments": arguments,
          } as dynamic)
        }

        else if message.startsWith("Unnecessary cast from type") {
          commands.append({
            "title": "Remove unnecessary cast",
            "command": "skew.removeCast",
            "arguments": arguments,
          } as dynamic)
        }

        else if message == "Number interpreted as decimal (use the prefix \"0o\" for octal numbers)" {
          commands.append({
            "title": "Remove leading zeros to avoid confusion",
            "command": "skew.removeLeadingZeros",
            "arguments": arguments,
          } as dynamic)

          commands.append({
            "title": "Add \"0o\" to interpret as octal",
            "command": "skew.addOctalPrefix",
            "arguments": arguments,
          } as dynamic)
        }

        return commands
      },
    })

    context.subscriptions.push(vscode.commands.registerCommand("skew.removeParentheses", (document, range) => {
      var text string = document.getText(range)
      if text.startsWith("(") && text.endsWith(")") {
        text = text.slice(1, text.count - 1)
        var edit = vscode.WorkspaceEdit.new()
        edit.replace(document.uri, range, text)
        vscode.workspace.applyEdit(edit)
      }
    }))

    context.subscriptions.push(vscode.commands.registerCommand("skew.removeCast", (document, range) => {
      var text string = document.getText(range)
      if text.startsWith("as ") {
        var line = document.lineAt(range.start).text
        var column = line.slice(0, range.start.character).trimRight().length
        range = vscode.Range.new(
          range.start.line, column,
          range.end.line, range.end.character)
        var edit = vscode.WorkspaceEdit.new()
        edit.replace(document.uri, range, "")
        vscode.workspace.applyEdit(edit)
      }
    }))

    context.subscriptions.push(vscode.commands.registerCommand("skew.removeLeadingZeros", (document, range) => {
      var text string = document.getText(range)
      var value double = +(text as dynamic)
      if text.startsWith("0") && value == value {
        while text.startsWith("0") {
          text = text.slice(1)
        }
        var edit = vscode.WorkspaceEdit.new()
        edit.replace(document.uri, range, text)
        vscode.workspace.applyEdit(edit)
      }
    }))

    context.subscriptions.push(vscode.commands.registerCommand("skew.addOctalPrefix", (document, range) => {
      var text string = document.getText(range)
      var value double = +(text as dynamic)
      if value == value {
        while text.startsWith("0") {
          text = text.slice(1)
        }
        var edit = vscode.WorkspaceEdit.new()
        edit.replace(document.uri, range, "0o" + text)
        vscode.workspace.applyEdit(edit)
      }
    }))
  }
}
